import random

def is_prime(n):
    """Check if a number is a prime"""
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def generate_prime_candidate(length):
    """Generate a prime candidate of the given length"""
    p = random.getrandbits(length)
    # Apply a mask to set MSB and LSB to 1
    p |= (1 << length - 1) | 1
    return p

def generate_large_prime(length=512):
    """Generate a large prime number of specified length"""
    p = 4
    while not is_prime(p):
        p = generate_prime_candidate(length)
    return p

def find_primitive_root(p):
    """Find a primitive root for prime p"""
    if p == 2:
        return 1
    phi = p - 1
    factors = []
    n = phi
    i = 2
    while i * i <= n:
        if n % i == 0:
            factors.append(i)
            while n % i == 0:
                n //= i
        i += 1
    if n > 1:
        factors.append(n)

    def is_primitive_root(g, p):
        for factor in factors:
            if pow(g, phi // factor, p) == 1:
                return False
        return True

    for g in range(2, p):
        if is_primitive_root(g, p):
            return g
    return None

# Generate public parameters
prime_length = 512
p = generate_large_prime(prime_length)
g = find_primitive_root(p)

# Alice's private key
a = random.randint(2, p - 2)
A = pow(g, a, p)

# Bob's private key
b = random.randint(2, p - 2)
B = pow(g, b, p)

# Exchange public keys and compute shared secret
s_A = pow(B, a, p)  # Alice computes shared secret
s_B = pow(A, b, p)  # Bob computes shared secret

print(f"Prime number p: {p}")
print(f"Primitive root g: {g}")
print(f"Alice's private key a: {a}")
print(f"Alice's public key A: {A}")
print(f"Bob's private key b: {b}")
print(f"Bob's public key B: {B}")
print(f"Alice's computed shared secret: {s_A}")
print(f"Bob's computed shared secret: {s_B}")
print(f"Shared secret matches: {s_A == s_B}")
